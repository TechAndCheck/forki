class VideoSieve<%= camel_name %> < VideoSieve
  # To check if it's valid for the inputted graphql objects
  def self.check(graphql_objects)
    video_object = self.extractor(graphql_objects)

    true
  rescue StandardError
    return false
  end

  # output the expected format of:
  #
  # post_details = {
  #   id: video_object["id"],
  #   num_comments: num_comments,
  #   num_shares: share_count_object.fetch("count", nil),
  #   num_views: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["video_view_count"],
  #   reshare_warning: feedback_object["comet_ufi_summary_and_actions_renderer"]["feedback"]["should_show_reshare_warning"],
  #   video_preview_image_url: video_object["preferred_thumbnail"]["image"]["uri"],
  #   video_url: video_object["browser_native_hd_url"] || video_object["browser_native_sd_url"],
  #   text: text,
  #   created_at: creation_date,
  #   profile_link: story_node_object["comet_sections"]["context_layout"]["story"]["comet_sections"]["actor_photo"]["story"]["actors"][0]["url"],
  #   has_video: true
  # }
  # post_details[:video_preview_image_file] = Forki.retrieve_media(post_details[:video_preview_image_url])
  # post_details[:video_file] = Forki.retrieve_media(post_details[:video_url])
  # post_details[:reactions] = reaction_counts

  def self.sieve(graphql_objects)
    video_object = self.extractor(graphql_objects)

    post_details = {
      id: nil,
      num_comments: nil,
      num_shared: nil,
      num_views: nil,
      reshare_warning: nil,
      video_preview_image_url: nil,
      video_url: nil,
      text: nil,
      created_at: nil,
      profile_link: nil,
      has_video: true,
      video_preview_image_file: Forki.retrieve_media(video_preview_image_url),
      video_file: Forki.retrieve_media(video_url),
      reactions: nil
    }
  end

  private

  def self.extractor(graphql_objects)
    video_objects = graphql_objects.filter do |go|
      # go = go.first if go.kind_of?(Array) && !go.empty?
      # go.has_key?("video")
    end

    # video_objects.first.dig("video", "creation_story")
  end
end
